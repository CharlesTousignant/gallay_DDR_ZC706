/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "sleep.h"

#include "xgpio.h"
#include "xparameters.h"

#include "xuartps_hw.h"

int main()
{
    init_platform();

    XGpio gpio_wdata, gpio_wvalid, gpio_address, gpio_rready, gpio_rdata, gpio_rvalid, gpio_resp, gpio_state, gpio_bvalid;

    // Initialization routine
    XGpio_Initialize(&gpio_wdata, XPAR_AXI_GPIO_0_DEVICE_ID);
    XGpio_Initialize(&gpio_wvalid, XPAR_AXI_GPIO_1_DEVICE_ID);
    XGpio_Initialize(&gpio_address, XPAR_AXI_GPIO_2_DEVICE_ID);
    XGpio_Initialize(&gpio_rready, XPAR_AXI_GPIO_3_DEVICE_ID);

    XGpio_Initialize(&gpio_rdata, XPAR_AXI_GPIO_4_DEVICE_ID);
    XGpio_Initialize(&gpio_rvalid, XPAR_AXI_GPIO_5_DEVICE_ID);
    XGpio_Initialize(&gpio_resp, XPAR_AXI_GPIO_6_DEVICE_ID);
    XGpio_Initialize(&gpio_state, XPAR_AXI_GPIO_7_DEVICE_ID);
    XGpio_Initialize(&gpio_bvalid, XPAR_AXI_GPIO_8_DEVICE_ID);

    //Code
    //Direction: IN = 1, OUT = 0
    XGpio_SetDataDirection(&gpio_wdata, 1, 0);
    XGpio_SetDataDirection(&gpio_wvalid, 1, 0);
    XGpio_SetDataDirection(&gpio_address, 1, 0);
    XGpio_SetDataDirection(&gpio_rready, 1, 0);

    XGpio_SetDataDirection(&gpio_rdata, 1, 1);
    XGpio_SetDataDirection(&gpio_rvalid, 1, 1);
    XGpio_SetDataDirection(&gpio_resp, 1, 1);
    XGpio_SetDataDirection(&gpio_state, 1, 1);
    XGpio_SetDataDirection(&gpio_bvalid, 1, 1);

    print("Beep boop\n\r");

    const int BUSY_STATE = 1;
    const int READY_STATE = 0;

    const int READ_MODE = 0;
    const int WRITE_MODE = 1;

    const int OKAY = 0;
    const int EXOKAY = 1;
    const int SLVERR = 2;
    const int DECERR = 3;

    int wdata = 0;
    int rdata = 0;
    int address = 0;
    int state = 0;
    int resp = 0;

    char modeChar = '0';
    int modeInt = 0;

    char addressChar[11];
    char dataChar[11];

    int addressInt = 0;
    int dataInt = 0;

    while(TRUE){
    	setvbuf(stdin, NULL, _IONBF, 0);
    	    	for(;;)
    	    	{
    	    		do {
    	    			state = XGpio_DiscreteRead(&gpio_state);
    	    		} while(state != READY_STATE);


    	    		print("------------------------------- \n");
    	    		print("Mode LECTURE = 0, ECRITURE = 1: \n");
    	    		scanf(modeChar);
    	    		modeInt = atoi(&modeChar);

    	    		switch (modeInt)
    	    		{
    	    			case READ_MODE:
    	    				print("---MODE LECTURE--- \n");
    	    				print("Adresse de lecture: \n");
    	    				scanf("%10s", addressChar);
    	    				adressInt = atoi(&addressChar);
    	    				print("LECTURE A L'ADRESSE %d \n", adressInt);

    	    				XGpio_DiscreteWrite(&gpio_address, 1, adressInt);
    	    				XGpio_DiscreteWrite(&gpio_rready, 1, 1);

    	    				do{
    	    					print(".");
    	    				}while(XGpio_DiscreteRead(&gpio_rvalid) != 1);

    	    				rdata = XGpio_DiscreteRead(&gpio_rdata);

    	    				XGpio_DiscreteWrite(&gpio_rready, 1, 0);

    	    				print("\n");
    	    				print("Donnee lue: %d", rdata);
    	    				break;
    	    			case WRITE_MODE:
    	    				print("---MODE ECRITURE--- \n");
    	    				print("Donnee a ecrire: \n");
    	    				scanf("%10s", dataChar);
    	    				dataInt = atoi(&dataChar);
    	    				print("Adresse de lecture: \n");
    	    				scanf("%10s", addressChar);
    	    				adressInt = atoi(&addressChar);

    	    				print("ECRITURE A L'ADRESSE %d de la valeur %d \n", adresseInt, dataInt);

    	    				XGpio_DiscreteWrite(&gpio_address, 1, adressInt);
    	    				XGpio_DiscreteWrite(&gpio_wdata, 1, dataInt);
    	    				XGpio_DiscreteWrite(&gpio_wvalid, 1, 1);

    	    				do{
    	    					print(".");
    	    				}while(XGpio_DiscreteRead(&gpio_bvalid) != 1);

    	    				print("\n");
    	    				XGpio_DiscreteWrite(&gpio_wvalid, 1, 0);
    	    				resp = XGpio_DiscreteRead(&gpio_resp);

    	    				switch(resp)
    	    				{
    	    					case OKAY:
    	    						print("SUCCES: OKAY \n");
    	    						break;
    	    					case EXOKAY:
    	    					    print("SUCCES: EXOKAY \n");
    	    					    break;
    	    					case SLVERR:
    	    					    print("ECHEC: SLVERR \n");
    	    					    break;
    	    					case DECERR:
    	    					    print("ECHEC: DECERR \n");
    	    					    break;
    	    					default:
    	    						print("Erreur dans la valeur de RESP \n");
    	    				}
    	    				break;
    	    			default:
    	    				print("Sélectionnez une option entre 0 et 1. \n")
    	    		}
    	    	}
    }

    cleanup_platform();
    return 0;
}
