/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "sleep.h"

#include "xgpio.h"
#include "xparameters.h"

#include "xuartps_hw.h"

int main() {
	init_platform();

	XGpio gpio_wdata, gpio_wvalid, gpio_address, gpio_rready, gpio_rdata, gpio_rdata_ack,
			gpio_rvalid, gpio_resp, gpio_resp_ack, gpio_resp_valid;

	// Initialization routine
	XGpio_Initialize(&gpio_wdata, XPAR_AXI_GPIO_0_DEVICE_ID);
	XGpio_Initialize(&gpio_wvalid, XPAR_AXI_GPIO_1_DEVICE_ID);
	XGpio_Initialize(&gpio_address, XPAR_AXI_GPIO_2_DEVICE_ID);
	XGpio_Initialize(&gpio_rready, XPAR_AXI_GPIO_3_DEVICE_ID);
	XGpio_Initialize(&gpio_rdata, XPAR_AXI_GPIO_4_DEVICE_ID);
	XGpio_Initialize(&gpio_rdata_ack, XPAR_AXI_GPIO_7_DEVICE_ID);
	XGpio_Initialize(&gpio_rvalid, XPAR_AXI_GPIO_5_DEVICE_ID);
	XGpio_Initialize(&gpio_resp, XPAR_AXI_GPIO_6_DEVICE_ID);
	XGpio_Initialize(&gpio_resp_ack, XPAR_AXI_GPIO_9_DEVICE_ID);
	XGpio_Initialize(&gpio_resp_valid, XPAR_AXI_GPIO_8_DEVICE_ID);

	//Code
	//Direction: IN = 1, OUT = 0
	XGpio_SetDataDirection(&gpio_wdata, 1, 0);
	XGpio_SetDataDirection(&gpio_wvalid, 1, 0);
	XGpio_SetDataDirection(&gpio_address, 1, 0);
	XGpio_SetDataDirection(&gpio_rready, 1, 0);
	XGpio_SetDataDirection(&gpio_rdata, 1, 1);
	XGpio_SetDataDirection(&gpio_rdata_ack, 1, 0);
	XGpio_SetDataDirection(&gpio_rvalid, 1, 1);
	XGpio_SetDataDirection(&gpio_resp, 1, 1);
	XGpio_SetDataDirection(&gpio_resp_ack, 1, 0);
	XGpio_SetDataDirection(&gpio_resp_valid, 1, 1);


	print("Beep boop\n\r");
	print("application ver2 \n");

	const int BUSY_STATE = 1;
	const int READY_STATE = 0;

	const int READ_MODE = 0;
	const int WRITE_MODE = 1;

	const int OKAY = 0;
	const int EXOKAY = 1;
	const int SLVERR = 2;
	const int DECERR = 3;

	int wdata = 0;
	int rdata = 0;
	int address = 0;
	int state = 0;
	int resp = 0;

	int modeInt = 0;

	int addressInt = 0;
	int dataInt = 0;

	while (1) {
		setvbuf(stdin, NULL, _IONBF, 0);
		for (;;) {
//			do {
//				state = XGpio_DiscreteRead(&gpio_state, 1);
//			} while (state != READY_STATE);

			print("------------------------------- \n");
			print("Mode LECTURE = 0, ECRITURE = 1: \n");
			scanf("%d", &modeInt);

			if (modeInt == READ_MODE) {
				printf("---MODE LECTURE--- \n");
				printf("Adresse de lecture: \n");
				scanf("%d", &addressInt);
				//addressInt = atoi(&addressChar);
				printf("Lecture a l'adresse: %d \n", addressInt);

				XGpio_DiscreteWrite(&gpio_address, 1, addressInt);
				XGpio_DiscreteWrite(&gpio_rready, 1, 1);

				do {
					print("...");
				} while (!XGpio_DiscreteRead(&gpio_rvalid, 1));

				print("\n");

				rdata = XGpio_DiscreteRead(&gpio_rdata, 1);

				XGpio_DiscreteWrite(&gpio_rready, 1, 0);

				XGpio_DiscreteWrite(&gpio_wvalid, 1, 0);
				resp = XGpio_DiscreteRead(&gpio_resp, 1);

				if (resp == OKAY) {
					printf("SUCCES: OKAY \n");
				} else if (resp == EXOKAY) {
					printf("SUCCES: EXOKAY \n");
				} else if (resp == SLVERR) {
					printf("ECHEC: SLVERR \n");
				} else if (resp == DECERR) {
					printf("ECHEC: DECERR \n");
				} else {
					printf("Erreur dans la valeur de RESP \n");
				}

				printf("Donnee lue: %d \n", rdata);
			} else if (modeInt == WRITE_MODE) {
				printf("---MODE ECRITURE--- \n");
				printf("Donnee a ecrire: \n");
				scanf("%d", &dataInt);
				//dataInt = atoi(&dataChar);
				printf("Adresse de l'ecriture: \n");
				scanf("%d", &addressInt);
				//addressInt = atoi(&addressChar);

				printf("Ecriture a l'adresse %d de la valeur %d \n", addressInt,
						dataInt);

				XGpio_DiscreteWrite(&gpio_address, 1, addressInt);
				XGpio_DiscreteWrite(&gpio_wdata, 1, dataInt);
				XGpio_DiscreteWrite(&gpio_wvalid, 1, 1);

				do {
					print("...");
				} while (XGpio_DiscreteRead(&gpio_bvalid, 1) != 1);

				print("\n");
				XGpio_DiscreteWrite(&gpio_wvalid, 1, 0);
				resp = XGpio_DiscreteRead(&gpio_resp, 1);

				if (resp == OKAY) {
					print("SUCCES: OKAY \n");
				} else if (resp == EXOKAY) {
					print("SUCCES: EXOKAY \n");
				} else if (resp == SLVERR) {
					print("ECHEC: SLVERR \n");
				} else if (resp == DECERR) {
					print("ECHEC: DECERR \n");
				} else {
					print("Erreur dans la valeur de RESP \n");
				}
			} else {
				print("Sélectionnez une option entre 0 et 1. \n");
			}
		}
	}

	cleanup_platform();
	return 0;
}
