/******************************************************************************
 *
 * Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Use of the Software is limited solely to applications:
 * (a) running on a Xilinx device, or
 * (b) that interact with a Xilinx device through a bus or interconnect.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
 * OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * Except as contained in this notice, the name of the Xilinx shall not be used
 * in advertising or otherwise to promote the sale, use or other dealings in
 * this Software without prior written authorization from Xilinx.
 *
 ******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"
#include "sleep.h"

#include "xgpio.h"
#include "xparameters.h"

#include "xuartps_hw.h"

int main() {
	init_platform();

	print("Running burst_app_v0_3_1... \n");

	init_platform();

	XGpio gpio_wreq, gpio_rreq, gpio_wvalid, gpio_wlast, gpio_wack, gpio_awaddr, gpio_wdata, gpio_awlen,
	gpio_awburst, gpio_wresp_ack, gpio_rready, gpio_rack, gpio_araddr, gpio_arlen, gpio_arburst, gpio_rresp_ack,
	gpio_wfifo_ready, gpio_wresp_valid, gpio_wresp, gpio_rresp, gpio_rvalid, gpio_rdata, gpio_rresp_valid, gpio_debug_state;

	// Initialization routine
	XGpio_Initialize(&gpio_wreq, XPAR_AXI_GPIO_0_DEVICE_ID);
	XGpio_Initialize(&gpio_rreq, XPAR_AXI_GPIO_1_DEVICE_ID);
	XGpio_Initialize(&gpio_wvalid, XPAR_AXI_GPIO_2_DEVICE_ID);
	XGpio_Initialize(&gpio_wlast, XPAR_AXI_GPIO_3_DEVICE_ID);
	XGpio_Initialize(&gpio_wack, XPAR_AXI_GPIO_4_DEVICE_ID);
	XGpio_Initialize(&gpio_awaddr, XPAR_AXI_GPIO_5_DEVICE_ID);
	XGpio_Initialize(&gpio_wdata, XPAR_AXI_GPIO_6_DEVICE_ID);
	XGpio_Initialize(&gpio_awlen, XPAR_AXI_GPIO_7_DEVICE_ID);
	XGpio_Initialize(&gpio_awburst, XPAR_AXI_GPIO_8_DEVICE_ID);
	XGpio_Initialize(&gpio_wresp_ack, XPAR_AXI_GPIO_9_DEVICE_ID);
	XGpio_Initialize(&gpio_rready, XPAR_AXI_GPIO_10_DEVICE_ID);
	XGpio_Initialize(&gpio_rack, XPAR_AXI_GPIO_11_DEVICE_ID);
	XGpio_Initialize(&gpio_araddr, XPAR_AXI_GPIO_12_DEVICE_ID);
	XGpio_Initialize(&gpio_arlen, XPAR_AXI_GPIO_13_DEVICE_ID);
	XGpio_Initialize(&gpio_arburst, XPAR_AXI_GPIO_14_DEVICE_ID);
	XGpio_Initialize(&gpio_rresp_ack, XPAR_AXI_GPIO_15_DEVICE_ID);
	XGpio_Initialize(&gpio_wfifo_ready, XPAR_AXI_GPIO_16_DEVICE_ID);
	XGpio_Initialize(&gpio_wresp_valid, XPAR_AXI_GPIO_17_DEVICE_ID);
	XGpio_Initialize(&gpio_wresp, XPAR_AXI_GPIO_18_DEVICE_ID);
	XGpio_Initialize(&gpio_rresp, XPAR_AXI_GPIO_19_DEVICE_ID);
	XGpio_Initialize(&gpio_rvalid, XPAR_AXI_GPIO_20_DEVICE_ID);
	XGpio_Initialize(&gpio_rdata, XPAR_AXI_GPIO_21_DEVICE_ID);
	XGpio_Initialize(&gpio_rresp_valid, XPAR_AXI_GPIO_22_DEVICE_ID);
	XGpio_Initialize(&gpio_debug_state, XPAR_AXI_GPIO_23_DEVICE_ID);


	//Code
	//Direction: IN = 1, OUT = 0
	XGpio_SetDataDirection(&gpio_wreq, 1, 0);
	XGpio_SetDataDirection(&gpio_rreq, 1, 0);
	XGpio_SetDataDirection(&gpio_wvalid, 1, 0);
	XGpio_SetDataDirection(&gpio_wlast, 1, 0);
	XGpio_SetDataDirection(&gpio_wack, 1, 0);
	XGpio_SetDataDirection(&gpio_awaddr, 1, 0);
	XGpio_SetDataDirection(&gpio_wdata, 1, 0);
	XGpio_SetDataDirection(&gpio_awlen, 1, 0);
	XGpio_SetDataDirection(&gpio_awburst, 1, 0);
	XGpio_SetDataDirection(&gpio_wresp_ack, 1, 0);
	XGpio_SetDataDirection(&gpio_rready, 1, 0);
	XGpio_SetDataDirection(&gpio_rack, 1, 0);
	XGpio_SetDataDirection(&gpio_araddr, 1, 0);
	XGpio_SetDataDirection(&gpio_arlen, 1, 0);
	XGpio_SetDataDirection(&gpio_arburst, 1, 0);
	XGpio_SetDataDirection(&gpio_rresp_ack, 1, 0);
	XGpio_SetDataDirection(&gpio_wfifo_ready, 1, 1);
	XGpio_SetDataDirection(&gpio_wresp_valid, 1, 1);
	XGpio_SetDataDirection(&gpio_wresp, 1, 1);
	XGpio_SetDataDirection(&gpio_rresp, 1, 1);
	XGpio_SetDataDirection(&gpio_rvalid, 1, 1);
	XGpio_SetDataDirection(&gpio_rdata, 1, 1);
	XGpio_SetDataDirection(&gpio_rresp_valid, 1, 1);
	XGpio_SetDataDirection(&gpio_debug_state, 1, 1);


	cleanup_platform();
	return 0;
}
